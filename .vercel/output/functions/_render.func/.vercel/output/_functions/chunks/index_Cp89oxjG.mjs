import { a as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_CrkWirIh.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>The <strong>Virtual DOM</strong> in React.js is a concept that optimizes rendering performance by making updates more efficient. Here’s how it works and why it’s important:</p>\n<h3 id=\"1-what-is-the-dom\">1. <strong>What is the DOM?</strong></h3>\n<ul>\n<li><strong>DOM (Document Object Model)</strong> represents the structure of a web page. It’s an interface that allows programs to interact with and modify the content, structure, and style of a website.</li>\n<li>Manipulating the real DOM (for example, when adding, removing, or updating elements) is <strong>slow</strong> because it requires recalculating styles, layout, and re-rendering the entire UI in the browser.</li>\n</ul>\n<h3 id=\"2-what-is-the-virtual-dom\">2. <strong>What is the Virtual DOM?</strong></h3>\n<ul>\n<li>The <strong>Virtual DOM</strong> is a lightweight in-memory representation of the actual DOM. It is a JavaScript object that React uses to keep track of UI changes in an efficient way.</li>\n<li>Instead of manipulating the real DOM directly, React updates the virtual DOM first.</li>\n</ul>\n<h3 id=\"3-how-does-it-work\">3. <strong>How does it work?</strong></h3>\n<ul>\n<li><strong>Initial Render</strong>: When a component is rendered for the first time, React builds a virtual DOM tree that mirrors the structure of the real DOM.</li>\n<li><strong>Updates</strong>: When the state or props of a component change, React re-renders the virtual DOM and creates a new virtual DOM tree representing the updated state.</li>\n<li><strong>Diffing</strong>: React compares the new virtual DOM with the previous version to identify which parts of the real DOM need to be changed. This process is called <strong>reconciliation</strong> or <strong>diffing</strong>.</li>\n<li><strong>Batch Updates</strong>: After identifying the minimal set of changes, React updates only the necessary parts of the real DOM in a batch, which is much faster than updating the entire real DOM.</li>\n</ul>\n<h3 id=\"4-why-is-the-virtual-dom-fast\">4. <strong>Why is the Virtual DOM fast?</strong></h3>\n<ul>\n<li><strong>Efficient Reconciliation</strong>: By comparing the old and new virtual DOM trees, React can update only the parts of the UI that have changed, reducing unnecessary re-renders.</li>\n<li><strong>Batching Updates</strong>: React can batch multiple updates and apply them all at once to minimize interactions with the real DOM.</li>\n<li><strong>Minimized Layout Calculations</strong>: Since the real DOM is not manipulated directly until necessary, expensive layout recalculations are avoided.</li>\n</ul>\n<h3 id=\"5-key-benefits\">5. <strong>Key Benefits</strong></h3>\n<ul>\n<li><strong>Performance</strong>: Reduces the overhead of directly updating the real DOM, which can be slow, especially in complex applications.</li>\n<li><strong>Declarative UI</strong>: Allows developers to describe how the UI should look based on the application’s state without worrying about manually managing updates to the DOM.</li>\n</ul>\n<h3 id=\"example-of-virtual-dom-in-action\">Example of Virtual DOM in Action</h3>\n<p>When you call <code>setState</code> in React, the virtual DOM re-renders the updated component tree:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"jsx\"><code><span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> Counter</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">count</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">setCount</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> useState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">>You clicked {count} times&#x3C;/</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;</span><span style=\"color:#85E89D\">button</span><span style=\"color:#B392F0\"> onClick</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{() </span><span style=\"color:#F97583\">=></span><span style=\"color:#B392F0\"> setCount</span><span style=\"color:#E1E4E8\">(count </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">)}>Click me&#x3C;/</span><span style=\"color:#85E89D\">button</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    &#x3C;/</span><span style=\"color:#85E89D\">div</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Here, when you click the button, only the specific part of the DOM (the text showing the count) will be updated, rather than the entire page being re-rendered, thanks to the virtual DOM diffing process.</p>\n<h3 id=\"summary\">Summary</h3>\n<ul>\n<li>The <strong>Virtual DOM</strong> allows React to efficiently update the UI by comparing old and new virtual DOM trees and making only the necessary updates to the real DOM.</li>\n<li>This approach makes UI rendering faster, especially in large applications, by reducing the expensive operations needed to manipulate the real DOM.</li>\n</ul>";

				const frontmatter = {"title":"Do you know about DOM virtual in ReactJS?","description":"DOM virtual","pubDate":"sep 24 2024","heroImage":"/react-dom.png"};
				const file = "C:/Users/kiet.huynh/Documents/essential-programming-concepts-master/essential-programming-concepts-master/src/content/essential/DOM-Virtual/index.md";
				const url = undefined;
				function rawContent() {
					return "\r\nThe **Virtual DOM** in React.js is a concept that optimizes rendering performance by making updates more efficient. Here's how it works and why it's important:\r\n\r\n### 1. **What is the DOM?**\r\n\r\n- **DOM (Document Object Model)** represents the structure of a web page. It's an interface that allows programs to interact with and modify the content, structure, and style of a website.\r\n- Manipulating the real DOM (for example, when adding, removing, or updating elements) is **slow** because it requires recalculating styles, layout, and re-rendering the entire UI in the browser.\r\n\r\n### 2. **What is the Virtual DOM?**\r\n\r\n- The **Virtual DOM** is a lightweight in-memory representation of the actual DOM. It is a JavaScript object that React uses to keep track of UI changes in an efficient way.\r\n- Instead of manipulating the real DOM directly, React updates the virtual DOM first.\r\n\r\n### 3. **How does it work?**\r\n\r\n- **Initial Render**: When a component is rendered for the first time, React builds a virtual DOM tree that mirrors the structure of the real DOM.\r\n- **Updates**: When the state or props of a component change, React re-renders the virtual DOM and creates a new virtual DOM tree representing the updated state.\r\n- **Diffing**: React compares the new virtual DOM with the previous version to identify which parts of the real DOM need to be changed. This process is called **reconciliation** or **diffing**.\r\n- **Batch Updates**: After identifying the minimal set of changes, React updates only the necessary parts of the real DOM in a batch, which is much faster than updating the entire real DOM.\r\n\r\n### 4. **Why is the Virtual DOM fast?**\r\n\r\n- **Efficient Reconciliation**: By comparing the old and new virtual DOM trees, React can update only the parts of the UI that have changed, reducing unnecessary re-renders.\r\n- **Batching Updates**: React can batch multiple updates and apply them all at once to minimize interactions with the real DOM.\r\n- **Minimized Layout Calculations**: Since the real DOM is not manipulated directly until necessary, expensive layout recalculations are avoided.\r\n\r\n### 5. **Key Benefits**\r\n\r\n- **Performance**: Reduces the overhead of directly updating the real DOM, which can be slow, especially in complex applications.\r\n- **Declarative UI**: Allows developers to describe how the UI should look based on the application's state without worrying about manually managing updates to the DOM.\r\n\r\n### Example of Virtual DOM in Action\r\n\r\nWhen you call `setState` in React, the virtual DOM re-renders the updated component tree:\r\n\r\n```jsx\r\nfunction Counter() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nHere, when you click the button, only the specific part of the DOM (the text showing the count) will be updated, rather than the entire page being re-rendered, thanks to the virtual DOM diffing process.\r\n\r\n### Summary\r\n\r\n- The **Virtual DOM** allows React to efficiently update the UI by comparing old and new virtual DOM trees and making only the necessary updates to the real DOM.\r\n- This approach makes UI rendering faster, especially in large applications, by reducing the expensive operations needed to manipulate the real DOM.\r\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"1-what-is-the-dom","text":"1. What is the DOM?"},{"depth":3,"slug":"2-what-is-the-virtual-dom","text":"2. What is the Virtual DOM?"},{"depth":3,"slug":"3-how-does-it-work","text":"3. How does it work?"},{"depth":3,"slug":"4-why-is-the-virtual-dom-fast","text":"4. Why is the Virtual DOM fast?"},{"depth":3,"slug":"5-key-benefits","text":"5. Key Benefits"},{"depth":3,"slug":"example-of-virtual-dom-in-action","text":"Example of Virtual DOM in Action"},{"depth":3,"slug":"summary","text":"Summary"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
